{"version":3,"sources":["Services/FakeStreamService.ts","Utils/random.ts","Services/ItemService.ts","Store/Slices/ItemSlice.ts","Components/StreamingRow.tsx","Components/StreamingTable.tsx","Store/Slices/FakeStreamSlice.ts","Components/FakeStreamController.tsx","App.tsx","Store/Store.ts","index.tsx"],"names":["onItemUpdatedCallbacks","startStreaming","items","intervalUpdateMs","window","setInterval","min","max","randomIndex","length","Math","floor","random","oldItem","newItem","value","percentage","forEach","callback","getItems","numItems","Array","fill","map","i","index","name","generateItems","itemSlice","createSlice","initialState","data","reducers","updateItem","state","action","payload","setItems","reduce","acc","val","actions","StreamingRow","item","itemFromState","useSelector","className","toFixed","StreamingTable","dispatch","useDispatch","streamState","useState","initialItems","setInitialItems","onItemReceived","useEffect","func","intervalId","updateIntervalMs","push","clearInterval","Table","row","setStreamState","FakeStreamController","updateInterval","internalState","setInternalState","scope","Input","type","on_change","e","parseInt","Button","variant","style","width","onClick","App","maxWidth","margin","Heading","fontSize","display","gap","flex","store","configureStore","reducer","ItemSlice","FakeStreamSlice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAGMA,EAA8D,GAavDC,EAAiB,SAACC,EAA0BC,GAEvD,OAAKD,EAIcE,OAAOC,aAAY,WACpC,ICvByBC,EAAaC,EDuBhCC,GCvBmBF,EDuBQ,ECvBKC,EDuBFL,EAAMO,OCtB5CC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,GAAOA,IDuBjCO,EAAUX,EAAMM,GAChBM,EAAO,2BACRD,GADQ,IAEXE,MAAOF,EAAQE,MAAQL,KAAKE,SAAW,GACvCI,WAAYH,EAAQG,WAAaN,KAAKE,SAAW,KAGnDZ,EAAuBiB,SAAQ,SAACC,GAC9BA,EAASJ,QAGVX,IAhBO,GERCgB,EAAW,SAACC,GACvB,OAVoB,SAACA,GACrB,OAAO,IAAIC,MAAMD,GAAUE,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,MAAe,CACpDC,KAAK,GAAD,OAAKD,GACTT,WAA4B,GAAhBN,KAAKE,SAAgBF,KAAKE,SACtCG,MAAuB,IAAhBL,KAAKE,SAAkBF,KAAKE,aAM9Be,CAAcP,I,gBCDVQ,EAAYC,YAAY,CACnCH,KAAM,QACNI,aAN+B,CAC/BC,KAAM,IAMNC,SAAU,CACRC,WAAY,SAACC,EAAOC,GAClBD,EAAMH,KAAKI,EAAOC,QAAQV,MAAQS,EAAOC,SAE3CC,SAAU,SAACH,EAAOC,GAChBD,EAAMH,KAAOI,EAAOC,QAAQE,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAC/BD,GAD8B,kBAEhCC,EAAId,KAAOc,MACV,QAKH,EAAiCZ,EAAUa,QAAnCR,EAAR,EAAQA,WAAYI,EAApB,EAAoBA,SACZT,IAAf,Q,OCPec,EAjBM,SAAC,GAAyC,IAAD,IAAtCC,EAAsC,EAAtCA,KAChBC,EAAgBC,aACpB,SAACX,GAAD,OAAsBA,EAAMhC,MAAM6B,KAAKY,EAAKjB,SAE9C,OACE,+BACE,6BACE,mBAAGoB,UAAU,QAAb,SACE,mCAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAelB,WAGvB,oCAAKkB,QAAL,IAAKA,GAAL,UAAKA,EAAe7B,aAApB,aAAK,EAAsBgC,QAAQ,KACnC,oCAAKH,QAAL,IAAKA,GAAL,UAAKA,EAAe5B,kBAApB,aAAK,EAA2B+B,QAAQ,SCsC/BC,EAzCQ,WACrB,IAAMC,EAAWC,cACXC,EAAcN,aAAY,SAACX,GAAD,OAAsBA,EAAMiB,eAC5D,EAAwCC,mBAA4B,IAApE,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAiB,SAACZ,GACtBM,EAAShB,EAAWU,KAiBtB,OAdAa,qBAAU,WACR,ILlBmCC,EKkB7BvD,EAAQiB,EAASgC,EAAY/B,UAC7BsC,EAAazD,EAAeC,EAAOiD,EAAYQ,kBAMrD,OAJAV,EAASZ,EAASnC,IAClBoD,EAAgBpD,GLtBmBuD,EKuBZF,ELtBzBvD,EAAuB4D,KAAKH,GKwBnB,WACLI,cAAcH,MAGf,IAGD,eAACI,EAAA,EAAD,CAAOhB,UAAU,8BAAjB,UACE,gCACE,+BACE,sCACA,uCACA,+CAGJ,gCACGO,EAAa9B,KAAI,SAACwC,GAAD,OAChB,cAAC,EAAD,CAA6BpB,KAAMoB,GAAhBA,EAAIrC,e,kBCnCpBE,EAAYC,YAAY,CACnCH,KAAM,cACNI,aAPgC,CAChCV,SAAU,GACVuC,iBAAkB,KAMlB3B,SAAU,CACRgC,eAAgB,SAAC9B,EAAOC,GACtBD,EAAMd,SAAWe,EAAOC,QAAQhB,SAChCc,EAAMyB,iBAAmBxB,EAAOC,QAAQuB,qBAK/BK,EAAmBpC,EAAUa,QAA7BuB,eACApC,IAAf,QC0DeqC,EAvEc,WAC3B,IAAMd,EAAcN,aAAY,SAACX,GAAD,OAAsBA,EAAMiB,eACtDF,EAAWC,cAEjB,EAA0CE,mBAAyB,CACjEhC,SAAU+B,EAAY/B,SACtB8C,eAAgBf,EAAYQ,mBAF9B,mBAAOQ,EAAP,KAAsBC,EAAtB,KAcA,OACE,gCACE,eAACN,EAAA,EAAD,CAAOhB,UAAU,YAAjB,UACE,gCACE,+BACE,oBAAIuB,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,wBAGJ,kCACE,+BACE,oDACA,6BACE,cAACC,EAAA,EAAD,CACEC,KAAK,SACLxD,MAAOoD,EAAcD,eACrBM,UAAW,SAACC,GAAD,OACTL,EAAiB,2BACZD,GADW,IAEdD,eAAgBQ,SAASD,EAAE1D,kBAMrC,+BACE,yCACA,6BACE,cAACuD,EAAA,EAAD,CACEC,KAAK,SACLxD,MAAOoD,EAAc/C,SACrBoD,UAAW,SAACC,GACVL,EAAiB,2BACZD,GADW,IAEd/C,SAAUsD,SAASD,EAAE1D,wBAQnC,cAAC4D,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAO,CAAEC,MAAO,QAChBC,QAtDe,WACnB9B,EACEe,EAAe,CACb5C,SAAU+C,EAAc/C,SACxBuC,iBAAkBQ,EAAcD,mBA+ClC,+BChCSc,MAjCf,WACE,IAAM7B,EAAcN,aAAY,SAACX,GAAD,OAAsBA,EAAMiB,eAE5D,OACE,sBACE0B,MAAO,CACLI,SAAU,QACVC,OAAQ,UAHZ,UAME,cAACC,EAAA,EAAD,CAASN,MAAO,CAAEO,SAAU,UAA5B,oCAEA,sBACEP,MAAO,CACLQ,QAAS,OAETC,IAAK,QAJT,UAOE,qBACET,MAAO,CAAEU,KAAM,KADjB,SAIE,cAAC,EAAD,KAJF,UAEUpC,EAAY/B,SAFtB,YAEkC+B,EAAYQ,mBAI9C,qBAAKkB,MAAO,CAAEU,KAAM,KAApB,SACE,cAAC,EAAD,aC5BGC,G,OAAQC,YAAe,CAClCC,QAAS,CACPxF,MAAOyF,EACPxC,YAAayC,MCAjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.428f22b0.chunk.js","sourcesContent":["import IStreamableItem from \"../Types/IStreamableItem\";\nimport { randomNumber } from \"../Utils/random\";\n\nconst onItemUpdatedCallbacks: ((item: IStreamableItem) => void)[] = [];\n\nexport const registerOnItemReceived = (func: (item: IStreamableItem) => void) => {\n  onItemUpdatedCallbacks.push(func);\n};\n\n\nexport const stopStreaming = (intervalId: number | null) => {\n  if (intervalId) {\n    clearInterval(intervalId);\n  }\n}\n\nexport const startStreaming = (items: IStreamableItem[], intervalUpdateMs: number): number => {\n\n  if (!items) {\n    return -1;\n  }\n\n  const intervalId = window.setInterval(() => {\n    const randomIndex = randomNumber(0, items.length);\n    const oldItem = items[randomIndex];\n    const newItem = {\n      ...oldItem,\n      value: oldItem.value + Math.random() - 0.5,\n      percentage: oldItem.percentage + Math.random() - 0.5,\n    };\n\n    onItemUpdatedCallbacks.forEach((callback) => {\n      callback(newItem);\n    });\n\n  }, intervalUpdateMs);\n\n  return intervalId;\n};","export const randomNumber = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min) + min);","import IStreamableItem from \"../Types/IStreamableItem\";\n\nconst generateItems = (numItems: number): IStreamableItem[] => {\n  return new Array(numItems).fill(0).map((i, index) => ({\n    name: `${index}`,\n    percentage: Math.random() * 10 + Math.random(),\n    value: Math.random() * 1000 + Math.random(),\n  }));\n};\n\n\nexport const getItems = (numItems: number) => {\n  return generateItems(numItems);\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport IStreamableItem from '../../Types/IStreamableItem'\n\nexport interface ItemsState {\n  data: { [name: string]: IStreamableItem }\n}\n\nconst initialState: ItemsState = {\n  data: {}\n}\n\nexport const itemSlice = createSlice({\n  name: 'items',\n  initialState,\n  reducers: {\n    updateItem: (state, action: PayloadAction<IStreamableItem>) => {\n      state.data[action.payload.name] = action.payload;\n    },\n    setItems: (state, action: PayloadAction<IStreamableItem[]>) => {\n      state.data = action.payload.reduce((acc, val) => ({\n        ...acc,\n        [val.name]: val,\n      }), {})\n    },\n  },\n})\n\nexport const { updateItem, setItems } = itemSlice.actions\nexport default itemSlice.reducer","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../Store/Store\";\nimport IStreamableItem from \"../Types/IStreamableItem\";\n\nconst StreamingRow = ({ item }: { item: IStreamableItem }) => {\n  const itemFromState = useSelector(\n    (state: RootState) => state.items.data[item.name]\n  );\n  return (\n    <tr>\n      <td>\n        <p className=\"dnb-p\">\n          <b>{itemFromState?.name}</b>\n        </p>\n      </td>\n      <td>{itemFromState?.value?.toFixed(2)}</td>\n      <td>{itemFromState?.percentage?.toFixed(2)}</td>\n    </tr>\n  );\n};\n\nexport default StreamingRow;\n","import { Table } from \"@dnb/eufemia\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  startStreaming,\n  registerOnItemReceived,\n} from \"../Services/FakeStreamService\";\nimport { getItems } from \"../Services/ItemService\";\nimport { updateItem, setItems } from \"../Store/Slices/ItemSlice\";\nimport { RootState } from \"../Store/Store\";\nimport IStreamableItem from \"../Types/IStreamableItem\";\nimport StreamingRow from \"./StreamingRow\";\n\nconst StreamingTable = () => {\n  const dispatch = useDispatch();\n  const streamState = useSelector((state: RootState) => state.streamState);\n  const [initialItems, setInitialItems] = useState<IStreamableItem[]>([]);\n\n  const onItemReceived = (item: IStreamableItem) => {\n    dispatch(updateItem(item));\n  };\n\n  useEffect(() => {\n    const items = getItems(streamState.numItems);\n    const intervalId = startStreaming(items, streamState.updateIntervalMs);\n\n    dispatch(setItems(items));\n    setInitialItems(items);\n    registerOnItemReceived(onItemReceived);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Table className=\"dnb-table .dnb-table--fixed\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>% Change</th>\n        </tr>\n      </thead>\n      <tbody>\n        {initialItems.map((row) => (\n          <StreamingRow key={row.name} item={row} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default StreamingTable;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface StreamState {\n  numItems: number,\n  updateIntervalMs: number,\n}\n\nconst initialState: StreamState = {\n  numItems: 10,\n  updateIntervalMs: 500,\n}\n\nexport const itemSlice = createSlice({\n  name: 'fake-stream',\n  initialState,\n  reducers: {\n    setStreamState: (state, action: PayloadAction<StreamState>) => {\n      state.numItems = action.payload.numItems;\n      state.updateIntervalMs = action.payload.updateIntervalMs;\n    }\n  },\n})\n\nexport const { setStreamState } = itemSlice.actions\nexport default itemSlice.reducer","import { Button, Input, Table } from \"@dnb/eufemia\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStreamState } from \"../Store/Slices/FakeStreamSlice\";\nimport { RootState } from \"../Store/Store\";\n\ninterface ComponentState {\n  updateInterval: number;\n  numItems: number;\n}\n\nconst FakeStreamController = () => {\n  const streamState = useSelector((state: RootState) => state.streamState);\n  const dispatch = useDispatch();\n\n  const [internalState, setInternalState] = useState<ComponentState>({\n    numItems: streamState.numItems,\n    updateInterval: streamState.updateIntervalMs,\n  });\n\n  const updateValues = () => {\n    dispatch(\n      setStreamState({\n        numItems: internalState.numItems,\n        updateIntervalMs: internalState.updateInterval,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <Table className=\"dnb-table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Setting</th>\n            <th scope=\"col\">Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Update interval MS</td>\n            <td>\n              <Input\n                type=\"number\"\n                value={internalState.updateInterval}\n                on_change={(e: { value: string }) =>\n                  setInternalState({\n                    ...internalState,\n                    updateInterval: parseInt(e.value),\n                  })\n                }\n              />\n            </td>\n          </tr>\n          <tr>\n            <td># Items</td>\n            <td>\n              <Input\n                type=\"number\"\n                value={internalState.numItems}\n                on_change={(e: { value: string }) => {\n                  setInternalState({\n                    ...internalState,\n                    numItems: parseInt(e.value),\n                  });\n                }}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n      <Button\n        variant=\"secondary\"\n        style={{ width: \"100%\" }}\n        onClick={updateValues}\n      >\n        Update values\n      </Button>\n    </div>\n  );\n};\n\nexport default FakeStreamController;","import { Heading } from \"@dnb/eufemia\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"./Store/Store\";\nimport StreamingTable from \"./Components/StreamingTable\";\nimport FakeStreamController from \"./Components/FakeStreamController\";\n\nfunction App() {\n  const streamState = useSelector((state: RootState) => state.streamState);\n\n  return (\n    <div\n      style={{\n        maxWidth: \"80rem\",\n        margin: \"0 auto\",\n      }}\n    >\n      <Heading style={{ fontSize: \"1.5rem\" }}>RTK collection updates</Heading>\n\n      <div\n        style={{\n          display: \"flex\",\n\n          gap: \"1rem\",\n        }}\n      >\n        <div\n          style={{ flex: \"5\" }}\n          key={`${streamState.numItems}.${streamState.updateIntervalMs}`}\n        >\n          <StreamingTable />\n        </div>\n        <div style={{ flex: \"2\" }}>\n          <FakeStreamController />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport FakeStreamSlice from './Slices/FakeStreamSlice'\nimport ItemSlice from './Slices/ItemSlice'\n\nexport const store = configureStore({\n  reducer: {\n    items: ItemSlice,\n    streamState: FakeStreamSlice\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"@dnb/eufemia/style\";\nimport { store } from \"./Store/Store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}